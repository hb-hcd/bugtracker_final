@model PaginationList<Project>

@{
    ViewData["Title"] = "viewProjects";
}

<h1>Your Projects</h1>

<p>
    <a asp-action="createProject" asp-route-userId="@ViewBag.userId">Create New Project</a>
</p>

@using (Html.BeginForm("viewProjects", "Project", FormMethod.Get))
{
    <p>
        Search by name: @Html.TextBox("SearchString", ViewBag.CurrentFilter as string) 
        <input hidden name="userId" value="@ViewBag.userId" />
        <input type="submit" value="Search" />
    </p>
}

<table class="table">
    <thead>
        <tr>
            <th>
                Project Name
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                <a asp-action="Edit" asp-route-ProjectId="@item.Id">Edit</a> |
                <a asp-action="Assign" asp-route-ProjectId="@item.Id">Assign</a> |
                <a asp-action="Unassign" asp-route-ProjectId="@item.Id">Unassign</a> |
                <a asp-action="Archive" asp-route-ProjectId="@item.Id">Archive</a>
            </td>
        </tr>
}
    </tbody>
</table>
@*The properties HasPreviousPage and HasNextPage can be used to enable or disable Previous and Next paging buttons*@
@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

@*Show current page index and total pages*@
Page @(Model.TotalPages < Model.PageIndex ? 0 : Model.PageIndex) of @Model.TotalPages

@*Go to previous page: pageIndex -1, and pass the pageNumber to Action Index*@
<a asp-action="viewProjects"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   asp-route-userId="@ViewBag.userId"
   class="btn btn-default @prevDisabled">
    Previous
</a>
@*Go to next page: pageIndex +1*@
<a asp-action="viewProjects"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-userId="@ViewBag.userId"
   class="btn btn-default @nextDisabled">
    Next
</a>